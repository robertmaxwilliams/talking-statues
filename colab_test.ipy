{
 "nbformat": 4,
 "nbformat_minor": 2,
 "metadata": {
  "language_info": {
   "name": "python",
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   }
  },
  "orig_nbformat": 2,
  "file_extension": ".py",
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3
 },
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import gpt_2_simple as gpt2\n",
    "import os\n",
    "import requests\n",
    "from bottle import static_file\n",
    "from bottle import Bottle, run, request\n",
    "from random import randint as dice\n",
    "import time\n",
    "import markovify\n",
    "# import gpt2_test\n",
    "\n",
    "class bcolors:\n",
    "    HEADER = \"\\033[95m\"\n",
    "    OKBLUE = \"\\033[94m\"\n",
    "    OKGREEN = \"\\033[92m\"\n",
    "    WARNING = \"\\033[93m\"\n",
    "    FAIL = \"\\033[91m\"\n",
    "    ENDC = \"\\033[0m\"\n",
    "    BOLD = \"\\033[1m\"\n",
    "    UNDERLINE = \"\\033[4m\"\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Downloading model, starting session, and defining generation function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_name = \"124M\"\n",
    "if not os.path.isdir(os.path.join(\"models\", model_name)):\n",
    "    print(f\"Downloading {model_name} model...\")\n",
    "    gpt2.download_gpt2(model_name=model_name)\n",
    "\n",
    "# # Get user input\n",
    "# prompt = \"Once apon a time there was a \"\n",
    "# prefix = input(f'\\n{prompt}... : ')\n",
    "# if not prefix:\n",
    "#     prefix = \"frog named Michael J. Fox\"\n",
    "# prefix = prompt + prefix\n",
    "\n",
    "# # Start session and generate text\n",
    "# sess = gpt2.start_tf_sess()\n",
    "# gpt2.load_gpt2(sess)\n",
    "# output = gpt2.generate(sess, prefix=prefix, include_prefix=False, return_as_list=True)[0]\n",
    "# print(f'\\n\\n{bcolors.OKGREEN}{prefix} {bcolors.ENDC}{output}\\n')\n",
    "\n",
    "sess = gpt2.start_tf_sess()\n",
    "gpt2.load_gpt2(sess)\n",
    "\n",
    "def generate_text(prefix):\n",
    "    prefix = prefix[:-100]\n",
    "    output = gpt2.generate(\n",
    "        sess,\n",
    "        prefix=prefix,\n",
    "        include_prefix=False,\n",
    "        return_as_list=True,\n",
    "        length=100,\n",
    "        batch_size=5,\n",
    "        nsamples=5,\n",
    "    )\n",
    "    # print(f'\\n\\n{bcolors.OKGREEN}{prefix} {bcolors.ENDC}{output}\\n')\n",
    "    output = [x.lstrip(prefix) for x in output]\n",
    "    return output\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating and Starting server"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "app = Bottle()\n",
    "\n",
    "# build text model\n",
    "with open(\"corpus.txt\", encoding=\"utf8\") as f:\n",
    "    corpus = f.read()\n",
    "\n",
    "text_model = markovify.Text(corpus)\n",
    "\n",
    "\n",
    "def generate_from_text_model(text):\n",
    "    gems = gpt2_test.generate_text(text)\n",
    "    ret = \"\"\n",
    "    try:\n",
    "        for i in range(5):\n",
    "            ret += f\"<div class='predictionBox'> <p><pre>{gems[i]}</pre></p> </div>\"\n",
    "    except Exception as e:\n",
    "        print(f\"FEEE\\n{e}\\nEEEEF\")\n",
    "        return \"sorry, model failure: \" + str(e)\n",
    "    return ret\n",
    "\n",
    "\n",
    "def random_color():\n",
    "    return \"{:06x}\".format(dice(0, 0xFFFFFF))\n",
    "\n",
    "\n",
    "def colorize(text):\n",
    "    words = text_model.word_split(text)\n",
    "    ret = \"\"\n",
    "    for w in words:\n",
    "        ret += f\"<span style='background-color:#{random_color()}'>{w}</span>\"\n",
    "    return ret\n",
    "\n",
    "\n",
    "@app.route(\"/hello\")\n",
    "def hello():\n",
    "    return \"Hello World!\"\n",
    "\n",
    "\n",
    "@app.route(\"/static/<filename>\")\n",
    "def server_static(filename):\n",
    "    return static_file(filename, root=\"./static/\")\n",
    "\n",
    "\n",
    "@app.route(\"/\")\n",
    "def index():\n",
    "    return static_file(\"foo.html\", root=\"./\")\n",
    "\n",
    "\n",
    "@app.post(\"/generate\")\n",
    "def generate():\n",
    "    time.sleep(1)\n",
    "    text = request.forms.get(\"text\")\n",
    "    return generate_from_text_model(text)\n",
    "\n",
    "\n",
    "@app.post(\"/highlight\")\n",
    "def highlight():\n",
    "    time.sleep(0.5)\n",
    "    text = request.forms.get(\"text\")\n",
    "    return \"<p>\" + colorize(text) + \"</p>\"\n",
    "\n",
    "\n",
    "run(app, host=\"localhost\", port=8080)\n"
   ]
  }
 ]
}